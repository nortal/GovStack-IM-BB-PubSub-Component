/*
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.govstack.information_mediator.pubsub.management.xroad_admin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * version information
 */
@JsonPropertyOrder({
  VersionInfo.JSON_PROPERTY_INFO,
  VersionInfo.JSON_PROPERTY_JAVA_VERSION,
  VersionInfo.JSON_PROPERTY_MIN_JAVA_VERSION,
  VersionInfo.JSON_PROPERTY_MAX_JAVA_VERSION,
  VersionInfo.JSON_PROPERTY_USING_SUPPORTED_JAVA_VERSION,
  VersionInfo.JSON_PROPERTY_JAVA_VENDOR,
  VersionInfo.JSON_PROPERTY_JAVA_RUNTIME_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VersionInfo {
  public static final String JSON_PROPERTY_INFO = "info";
  private String info;

  public static final String JSON_PROPERTY_JAVA_VERSION = "java_version";
  private Integer javaVersion;

  public static final String JSON_PROPERTY_MIN_JAVA_VERSION = "min_java_version";
  private Integer minJavaVersion;

  public static final String JSON_PROPERTY_MAX_JAVA_VERSION = "max_java_version";
  private Integer maxJavaVersion;

  public static final String JSON_PROPERTY_USING_SUPPORTED_JAVA_VERSION = "using_supported_java_version";
  private Boolean usingSupportedJavaVersion;

  public static final String JSON_PROPERTY_JAVA_VENDOR = "java_vendor";
  private String javaVendor;

  public static final String JSON_PROPERTY_JAVA_RUNTIME_VERSION = "java_runtime_version";
  private String javaRuntimeVersion;

  public VersionInfo() {
  }

  public VersionInfo info(String info) {
    
    this.info = info;
    return this;
  }

   /**
   * information about the security server
   * @return info
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInfo() {
    return info;
  }


  @JsonProperty(JSON_PROPERTY_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInfo(String info) {
    this.info = info;
  }


  public VersionInfo javaVersion(Integer javaVersion) {
    
    this.javaVersion = javaVersion;
    return this;
  }

   /**
   * java version currently in use
   * @return javaVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getJavaVersion() {
    return javaVersion;
  }


  @JsonProperty(JSON_PROPERTY_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJavaVersion(Integer javaVersion) {
    this.javaVersion = javaVersion;
  }


  public VersionInfo minJavaVersion(Integer minJavaVersion) {
    
    this.minJavaVersion = minJavaVersion;
    return this;
  }

   /**
   * minimum supported java version
   * @return minJavaVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinJavaVersion() {
    return minJavaVersion;
  }


  @JsonProperty(JSON_PROPERTY_MIN_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinJavaVersion(Integer minJavaVersion) {
    this.minJavaVersion = minJavaVersion;
  }


  public VersionInfo maxJavaVersion(Integer maxJavaVersion) {
    
    this.maxJavaVersion = maxJavaVersion;
    return this;
  }

   /**
   * maximum supported java version
   * @return maxJavaVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxJavaVersion() {
    return maxJavaVersion;
  }


  @JsonProperty(JSON_PROPERTY_MAX_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxJavaVersion(Integer maxJavaVersion) {
    this.maxJavaVersion = maxJavaVersion;
  }


  public VersionInfo usingSupportedJavaVersion(Boolean usingSupportedJavaVersion) {
    
    this.usingSupportedJavaVersion = usingSupportedJavaVersion;
    return this;
  }

   /**
   * true if currently used java version is supported
   * @return usingSupportedJavaVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USING_SUPPORTED_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUsingSupportedJavaVersion() {
    return usingSupportedJavaVersion;
  }


  @JsonProperty(JSON_PROPERTY_USING_SUPPORTED_JAVA_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsingSupportedJavaVersion(Boolean usingSupportedJavaVersion) {
    this.usingSupportedJavaVersion = usingSupportedJavaVersion;
  }


  public VersionInfo javaVendor(String javaVendor) {
    
    this.javaVendor = javaVendor;
    return this;
  }

   /**
   * java vendor string from java.vendor system property
   * @return javaVendor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JAVA_VENDOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getJavaVendor() {
    return javaVendor;
  }


  @JsonProperty(JSON_PROPERTY_JAVA_VENDOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJavaVendor(String javaVendor) {
    this.javaVendor = javaVendor;
  }


  public VersionInfo javaRuntimeVersion(String javaRuntimeVersion) {
    
    this.javaRuntimeVersion = javaRuntimeVersion;
    return this;
  }

   /**
   * java runtime version string from java.runtime.version system property
   * @return javaRuntimeVersion
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JAVA_RUNTIME_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getJavaRuntimeVersion() {
    return javaRuntimeVersion;
  }


  @JsonProperty(JSON_PROPERTY_JAVA_RUNTIME_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJavaRuntimeVersion(String javaRuntimeVersion) {
    this.javaRuntimeVersion = javaRuntimeVersion;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionInfo versionInfo = (VersionInfo) o;
    return Objects.equals(this.info, versionInfo.info) &&
        Objects.equals(this.javaVersion, versionInfo.javaVersion) &&
        Objects.equals(this.minJavaVersion, versionInfo.minJavaVersion) &&
        Objects.equals(this.maxJavaVersion, versionInfo.maxJavaVersion) &&
        Objects.equals(this.usingSupportedJavaVersion, versionInfo.usingSupportedJavaVersion) &&
        Objects.equals(this.javaVendor, versionInfo.javaVendor) &&
        Objects.equals(this.javaRuntimeVersion, versionInfo.javaRuntimeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(info, javaVersion, minJavaVersion, maxJavaVersion, usingSupportedJavaVersion, javaVendor, javaRuntimeVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionInfo {\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    javaVersion: ").append(toIndentedString(javaVersion)).append("\n");
    sb.append("    minJavaVersion: ").append(toIndentedString(minJavaVersion)).append("\n");
    sb.append("    maxJavaVersion: ").append(toIndentedString(maxJavaVersion)).append("\n");
    sb.append("    usingSupportedJavaVersion: ").append(toIndentedString(usingSupportedJavaVersion)).append("\n");
    sb.append("    javaVendor: ").append(toIndentedString(javaVendor)).append("\n");
    sb.append("    javaRuntimeVersion: ").append(toIndentedString(javaRuntimeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

