/*
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.govstack.information_mediator.pubsub.management.xroad_admin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.govstack.information_mediator.pubsub.management.xroad_admin.client.model.CertificateAuthorityOcspResponse;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * approved certificate authority information. Only for top CAs.
 */
@JsonPropertyOrder({
  CertificateAuthority.JSON_PROPERTY_NAME,
  CertificateAuthority.JSON_PROPERTY_SUBJECT_DISTINGUISHED_NAME,
  CertificateAuthority.JSON_PROPERTY_ISSUER_DISTINGUISHED_NAME,
  CertificateAuthority.JSON_PROPERTY_OCSP_RESPONSE,
  CertificateAuthority.JSON_PROPERTY_NOT_AFTER,
  CertificateAuthority.JSON_PROPERTY_TOP_CA,
  CertificateAuthority.JSON_PROPERTY_PATH,
  CertificateAuthority.JSON_PROPERTY_AUTHENTICATION_ONLY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CertificateAuthority {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SUBJECT_DISTINGUISHED_NAME = "subject_distinguished_name";
  private String subjectDistinguishedName;

  public static final String JSON_PROPERTY_ISSUER_DISTINGUISHED_NAME = "issuer_distinguished_name";
  private String issuerDistinguishedName;

  public static final String JSON_PROPERTY_OCSP_RESPONSE = "ocsp_response";
  private CertificateAuthorityOcspResponse ocspResponse;

  public static final String JSON_PROPERTY_NOT_AFTER = "not_after";
  private OffsetDateTime notAfter;

  public static final String JSON_PROPERTY_TOP_CA = "top_ca";
  private Boolean topCa;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_AUTHENTICATION_ONLY = "authentication_only";
  private Boolean authenticationOnly;

  public CertificateAuthority() {
  }

  public CertificateAuthority name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * name of the CA, as defined in global conf. Used also as an identifier
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CertificateAuthority subjectDistinguishedName(String subjectDistinguishedName) {
    
    this.subjectDistinguishedName = subjectDistinguishedName;
    return this;
  }

   /**
   * subject distinguished name
   * @return subjectDistinguishedName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBJECT_DISTINGUISHED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubjectDistinguishedName() {
    return subjectDistinguishedName;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_DISTINGUISHED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubjectDistinguishedName(String subjectDistinguishedName) {
    this.subjectDistinguishedName = subjectDistinguishedName;
  }


  public CertificateAuthority issuerDistinguishedName(String issuerDistinguishedName) {
    
    this.issuerDistinguishedName = issuerDistinguishedName;
    return this;
  }

   /**
   * issuer distinguished name
   * @return issuerDistinguishedName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ISSUER_DISTINGUISHED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIssuerDistinguishedName() {
    return issuerDistinguishedName;
  }


  @JsonProperty(JSON_PROPERTY_ISSUER_DISTINGUISHED_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIssuerDistinguishedName(String issuerDistinguishedName) {
    this.issuerDistinguishedName = issuerDistinguishedName;
  }


  public CertificateAuthority ocspResponse(CertificateAuthorityOcspResponse ocspResponse) {
    
    this.ocspResponse = ocspResponse;
    return this;
  }

   /**
   * Get ocspResponse
   * @return ocspResponse
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OCSP_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CertificateAuthorityOcspResponse getOcspResponse() {
    return ocspResponse;
  }


  @JsonProperty(JSON_PROPERTY_OCSP_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOcspResponse(CertificateAuthorityOcspResponse ocspResponse) {
    this.ocspResponse = ocspResponse;
  }


  public CertificateAuthority notAfter(OffsetDateTime notAfter) {
    
    this.notAfter = notAfter;
    return this;
  }

   /**
   * certificate authority expires at
   * @return notAfter
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOT_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getNotAfter() {
    return notAfter;
  }


  @JsonProperty(JSON_PROPERTY_NOT_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }


  public CertificateAuthority topCa(Boolean topCa) {
    
    this.topCa = topCa;
    return this;
  }

   /**
   * if the certificate authority is top CA (instead of intermediate)
   * @return topCa
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOP_CA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTopCa() {
    return topCa;
  }


  @JsonProperty(JSON_PROPERTY_TOP_CA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTopCa(Boolean topCa) {
    this.topCa = topCa;
  }


  public CertificateAuthority path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * encoded path string from this CA to top CA
   * @return path
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(String path) {
    this.path = path;
  }


  public CertificateAuthority authenticationOnly(Boolean authenticationOnly) {
    
    this.authenticationOnly = authenticationOnly;
    return this;
  }

   /**
   * if certificate authority is limited for authentication use only
   * @return authenticationOnly
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAuthenticationOnly() {
    return authenticationOnly;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthenticationOnly(Boolean authenticationOnly) {
    this.authenticationOnly = authenticationOnly;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAuthority certificateAuthority = (CertificateAuthority) o;
    return Objects.equals(this.name, certificateAuthority.name) &&
        Objects.equals(this.subjectDistinguishedName, certificateAuthority.subjectDistinguishedName) &&
        Objects.equals(this.issuerDistinguishedName, certificateAuthority.issuerDistinguishedName) &&
        Objects.equals(this.ocspResponse, certificateAuthority.ocspResponse) &&
        Objects.equals(this.notAfter, certificateAuthority.notAfter) &&
        Objects.equals(this.topCa, certificateAuthority.topCa) &&
        Objects.equals(this.path, certificateAuthority.path) &&
        Objects.equals(this.authenticationOnly, certificateAuthority.authenticationOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, subjectDistinguishedName, issuerDistinguishedName, ocspResponse, notAfter, topCa, path, authenticationOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAuthority {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subjectDistinguishedName: ").append(toIndentedString(subjectDistinguishedName)).append("\n");
    sb.append("    issuerDistinguishedName: ").append(toIndentedString(issuerDistinguishedName)).append("\n");
    sb.append("    ocspResponse: ").append(toIndentedString(ocspResponse)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    topCa: ").append(toIndentedString(topCa)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    authenticationOnly: ").append(toIndentedString(authenticationOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

