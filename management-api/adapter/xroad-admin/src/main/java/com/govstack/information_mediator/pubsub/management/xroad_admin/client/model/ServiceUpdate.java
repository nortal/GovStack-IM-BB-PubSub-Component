/*
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.govstack.information_mediator.pubsub.management.xroad_admin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * object for updating a service or all services within service description
 */
@JsonPropertyOrder({
  ServiceUpdate.JSON_PROPERTY_URL,
  ServiceUpdate.JSON_PROPERTY_TIMEOUT,
  ServiceUpdate.JSON_PROPERTY_SSL_AUTH,
  ServiceUpdate.JSON_PROPERTY_URL_ALL,
  ServiceUpdate.JSON_PROPERTY_TIMEOUT_ALL,
  ServiceUpdate.JSON_PROPERTY_SSL_AUTH_ALL,
  ServiceUpdate.JSON_PROPERTY_IGNORE_WARNINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServiceUpdate {
  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  private Integer timeout;

  public static final String JSON_PROPERTY_SSL_AUTH = "ssl_auth";
  private Boolean sslAuth;

  public static final String JSON_PROPERTY_URL_ALL = "url_all";
  private Boolean urlAll = false;

  public static final String JSON_PROPERTY_TIMEOUT_ALL = "timeout_all";
  private Boolean timeoutAll = false;

  public static final String JSON_PROPERTY_SSL_AUTH_ALL = "ssl_auth_all";
  private Boolean sslAuthAll = false;

  public static final String JSON_PROPERTY_IGNORE_WARNINGS = "ignore_warnings";
  private Boolean ignoreWarnings = false;

  public ServiceUpdate() {
  }

  public ServiceUpdate url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * service url
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public ServiceUpdate timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * service time out value
   * minimum: 0
   * maximum: 1000
   * @return timeout
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public ServiceUpdate sslAuth(Boolean sslAuth) {
    
    this.sslAuth = sslAuth;
    return this;
  }

   /**
   * service ssl auth
   * @return sslAuth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SSL_AUTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSslAuth() {
    return sslAuth;
  }


  @JsonProperty(JSON_PROPERTY_SSL_AUTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSslAuth(Boolean sslAuth) {
    this.sslAuth = sslAuth;
  }


  public ServiceUpdate urlAll(Boolean urlAll) {
    
    this.urlAll = urlAll;
    return this;
  }

   /**
   * url is applied for all services
   * @return urlAll
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUrlAll() {
    return urlAll;
  }


  @JsonProperty(JSON_PROPERTY_URL_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrlAll(Boolean urlAll) {
    this.urlAll = urlAll;
  }


  public ServiceUpdate timeoutAll(Boolean timeoutAll) {
    
    this.timeoutAll = timeoutAll;
    return this;
  }

   /**
   * timeout value is applied for all services
   * @return timeoutAll
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEOUT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTimeoutAll() {
    return timeoutAll;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeoutAll(Boolean timeoutAll) {
    this.timeoutAll = timeoutAll;
  }


  public ServiceUpdate sslAuthAll(Boolean sslAuthAll) {
    
    this.sslAuthAll = sslAuthAll;
    return this;
  }

   /**
   * ssl authentication is applied for all services
   * @return sslAuthAll
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SSL_AUTH_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSslAuthAll() {
    return sslAuthAll;
  }


  @JsonProperty(JSON_PROPERTY_SSL_AUTH_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSslAuthAll(Boolean sslAuthAll) {
    this.sslAuthAll = sslAuthAll;
  }


  public ServiceUpdate ignoreWarnings(Boolean ignoreWarnings) {
    
    this.ignoreWarnings = ignoreWarnings;
    return this;
  }

   /**
   * if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail
   * @return ignoreWarnings
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreWarnings() {
    return ignoreWarnings;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreWarnings(Boolean ignoreWarnings) {
    this.ignoreWarnings = ignoreWarnings;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceUpdate serviceUpdate = (ServiceUpdate) o;
    return Objects.equals(this.url, serviceUpdate.url) &&
        Objects.equals(this.timeout, serviceUpdate.timeout) &&
        Objects.equals(this.sslAuth, serviceUpdate.sslAuth) &&
        Objects.equals(this.urlAll, serviceUpdate.urlAll) &&
        Objects.equals(this.timeoutAll, serviceUpdate.timeoutAll) &&
        Objects.equals(this.sslAuthAll, serviceUpdate.sslAuthAll) &&
        Objects.equals(this.ignoreWarnings, serviceUpdate.ignoreWarnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, timeout, sslAuth, urlAll, timeoutAll, sslAuthAll, ignoreWarnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceUpdate {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    sslAuth: ").append(toIndentedString(sslAuth)).append("\n");
    sb.append("    urlAll: ").append(toIndentedString(urlAll)).append("\n");
    sb.append("    timeoutAll: ").append(toIndentedString(timeoutAll)).append("\n");
    sb.append("    sslAuthAll: ").append(toIndentedString(sslAuthAll)).append("\n");
    sb.append("    ignoreWarnings: ").append(toIndentedString(ignoreWarnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

