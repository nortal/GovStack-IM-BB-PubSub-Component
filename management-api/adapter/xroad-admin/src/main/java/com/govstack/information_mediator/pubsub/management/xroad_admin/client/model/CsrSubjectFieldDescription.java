/*
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.govstack.information_mediator.pubsub.management.xroad_admin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * object describing input fields for CSR subject DN info
 */
@JsonPropertyOrder({
  CsrSubjectFieldDescription.JSON_PROPERTY_ID,
  CsrSubjectFieldDescription.JSON_PROPERTY_LABEL,
  CsrSubjectFieldDescription.JSON_PROPERTY_LABEL_KEY,
  CsrSubjectFieldDescription.JSON_PROPERTY_DEFAULT_VALUE,
  CsrSubjectFieldDescription.JSON_PROPERTY_READ_ONLY,
  CsrSubjectFieldDescription.JSON_PROPERTY_REQUIRED,
  CsrSubjectFieldDescription.JSON_PROPERTY_LOCALIZED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CsrSubjectFieldDescription {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_LABEL_KEY = "label_key";
  private String labelKey;

  public static final String JSON_PROPERTY_DEFAULT_VALUE = "default_value";
  private String defaultValue;

  public static final String JSON_PROPERTY_READ_ONLY = "read_only";
  private Boolean readOnly;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Boolean required;

  public static final String JSON_PROPERTY_LOCALIZED = "localized";
  private Boolean localized;

  public CsrSubjectFieldDescription() {
  }

  @JsonCreator
  public CsrSubjectFieldDescription(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_LABEL) String label, 
    @JsonProperty(JSON_PROPERTY_LABEL_KEY) String labelKey, 
    @JsonProperty(JSON_PROPERTY_DEFAULT_VALUE) String defaultValue, 
    @JsonProperty(JSON_PROPERTY_READ_ONLY) Boolean readOnly, 
    @JsonProperty(JSON_PROPERTY_REQUIRED) Boolean required, 
    @JsonProperty(JSON_PROPERTY_LOCALIZED) Boolean localized
  ) {
    this();
    this.id = id;
    this.label = label;
    this.labelKey = labelKey;
    this.defaultValue = defaultValue;
    this.readOnly = readOnly;
    this.required = required;
    this.localized = localized;
  }

   /**
   * the identifier of the field (such as &#39;O&#39;, &#39;OU&#39; etc)
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }




   /**
   * label of the field, used to display the field in the user interface
   * @return label
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }




   /**
   * localization key for label of the field, used to display the field in the user interface
   * @return labelKey
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabelKey() {
    return labelKey;
  }




   /**
   * the default value of the field. Can be empty.
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultValue() {
    return defaultValue;
  }




   /**
   * if this field is read-only
   * @return readOnly
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getReadOnly() {
    return readOnly;
  }




   /**
   * if this field is required to be filled
   * @return required
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRequired() {
    return required;
  }




   /**
   * if true, label key is in property \&quot;label_key\&quot;. If false, actual label is in property \&quot;label\&quot;
   * @return localized
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCALIZED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLocalized() {
    return localized;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CsrSubjectFieldDescription csrSubjectFieldDescription = (CsrSubjectFieldDescription) o;
    return Objects.equals(this.id, csrSubjectFieldDescription.id) &&
        Objects.equals(this.label, csrSubjectFieldDescription.label) &&
        Objects.equals(this.labelKey, csrSubjectFieldDescription.labelKey) &&
        Objects.equals(this.defaultValue, csrSubjectFieldDescription.defaultValue) &&
        Objects.equals(this.readOnly, csrSubjectFieldDescription.readOnly) &&
        Objects.equals(this.required, csrSubjectFieldDescription.required) &&
        Objects.equals(this.localized, csrSubjectFieldDescription.localized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, labelKey, defaultValue, readOnly, required, localized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CsrSubjectFieldDescription {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labelKey: ").append(toIndentedString(labelKey)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

