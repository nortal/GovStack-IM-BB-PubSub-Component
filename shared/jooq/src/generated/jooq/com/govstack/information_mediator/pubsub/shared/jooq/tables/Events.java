/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables;


import com.govstack.information_mediator.pubsub.shared.jooq.ImMsg;
import com.govstack.information_mediator.pubsub.shared.jooq.Keys;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.EventsRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * record of all published events
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>im_msg.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>im_msg.events.id</code>. (technical field) primary key
     * of record
     */
    public final TableField<EventsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "(technical field) primary key of record");

    /**
     * The column <code>im_msg.events.room_id</code>. (technical field) foreign
     * key connected to the record
     */
    public final TableField<EventsRecord, UUID> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.UUID.nullable(false), this, "(technical field) foreign key connected to the record");

    /**
     * The column <code>im_msg.events.event_type_version_id</code>. (technical
     * field) foreign key connected to the record
     */
    public final TableField<EventsRecord, UUID> EVENT_TYPE_VERSION_ID = createField(DSL.name("event_type_version_id"), SQLDataType.UUID.nullable(false), this, "(technical field) foreign key connected to the record");

    /**
     * The column <code>im_msg.events.event_type_id</code>. (technical field)
     * foreign key connected to the record
     */
    public final TableField<EventsRecord, UUID> EVENT_TYPE_ID = createField(DSL.name("event_type_id"), SQLDataType.UUID.nullable(false), this, "(technical field) foreign key connected to the record");

    /**
     * The column <code>im_msg.events.publisher_id</code>. (technical field)
     * foreign key connected to the record
     */
    public final TableField<EventsRecord, UUID> PUBLISHER_ID = createField(DSL.name("publisher_id"), SQLDataType.UUID.nullable(false), this, "(technical field) foreign key connected to the record");

    /**
     * The column <code>im_msg.events.correlation_id</code>. Correlation ID of
     * the event linking event messages in different queues
     */
    public final TableField<EventsRecord, String> CORRELATION_ID = createField(DSL.name("correlation_id"), SQLDataType.VARCHAR, this, "Correlation ID of the event linking event messages in different queues");

    /**
     * The column <code>im_msg.events.created_at</code>. Filled with a timestamp
     * when ActiveMQ Artemis acknowledges publishing
     */
    public final TableField<EventsRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "Filled with a timestamp when ActiveMQ Artemis acknowledges publishing");

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("record of all published events"), TableOptions.table());
    }

    /**
     * Create an aliased <code>im_msg.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>im_msg.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    /**
     * Create a <code>im_msg.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    public <O extends Record> Events(Table<O> child, ForeignKey<O, EventsRecord> key) {
        super(child, key, EVENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImMsg.IM_MSG;
    }

    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.PK_EVENTS;
    }

    @Override
    public List<ForeignKey<EventsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENTS__FK_EVENTS_ROOM_ID, Keys.EVENTS__FK_EVENTS_EVENT_TYPE_VERSION_ID, Keys.EVENTS__FK_EVENTS_EVENT_TYPE_ID, Keys.EVENTS__FK_EVENTS_PUBLISHER_ID);
    }

    private transient Rooms _rooms;
    private transient EventTypeVersions _eventTypeVersions;
    private transient EventTypes _eventTypes;
    private transient Publishers _publishers;

    /**
     * Get the implicit join path to the <code>im_msg.rooms</code> table.
     */
    public Rooms rooms() {
        if (_rooms == null)
            _rooms = new Rooms(this, Keys.EVENTS__FK_EVENTS_ROOM_ID);

        return _rooms;
    }

    /**
     * Get the implicit join path to the <code>im_msg.event_type_versions</code>
     * table.
     */
    public EventTypeVersions eventTypeVersions() {
        if (_eventTypeVersions == null)
            _eventTypeVersions = new EventTypeVersions(this, Keys.EVENTS__FK_EVENTS_EVENT_TYPE_VERSION_ID);

        return _eventTypeVersions;
    }

    /**
     * Get the implicit join path to the <code>im_msg.event_types</code> table.
     */
    public EventTypes eventTypes() {
        if (_eventTypes == null)
            _eventTypes = new EventTypes(this, Keys.EVENTS__FK_EVENTS_EVENT_TYPE_ID);

        return _eventTypes;
    }

    /**
     * Get the implicit join path to the <code>im_msg.publishers</code> table.
     */
    public Publishers publishers() {
        if (_publishers == null)
            _publishers = new Publishers(this, Keys.EVENTS__FK_EVENTS_PUBLISHER_ID);

        return _publishers;
    }

    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    @Override
    public Events as(Table<?> alias) {
        return new Events(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Table<?> name) {
        return new Events(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, UUID, UUID, String, Instant> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
