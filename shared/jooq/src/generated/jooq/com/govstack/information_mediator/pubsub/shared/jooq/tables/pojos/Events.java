/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos;


import java.io.Serializable;
import java.time.Instant;
import java.util.UUID;


/**
 * record of all published events
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID id;
    private final UUID roomId;
    private final UUID eventTypeVersionId;
    private final UUID eventTypeId;
    private final UUID publisherId;
    private final String correlationId;
    private final Instant createdAt;

    public Events(Events value) {
        this.id = value.id;
        this.roomId = value.roomId;
        this.eventTypeVersionId = value.eventTypeVersionId;
        this.eventTypeId = value.eventTypeId;
        this.publisherId = value.publisherId;
        this.correlationId = value.correlationId;
        this.createdAt = value.createdAt;
    }

    public Events(
        UUID id,
        UUID roomId,
        UUID eventTypeVersionId,
        UUID eventTypeId,
        UUID publisherId,
        String correlationId,
        Instant createdAt
    ) {
        this.id = id;
        this.roomId = roomId;
        this.eventTypeVersionId = eventTypeVersionId;
        this.eventTypeId = eventTypeId;
        this.publisherId = publisherId;
        this.correlationId = correlationId;
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>im_msg.events.id</code>. (technical field) primary key
     * of record
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>im_msg.events.room_id</code>. (technical field) foreign
     * key connected to the record
     */
    public UUID getRoomId() {
        return this.roomId;
    }

    /**
     * Getter for <code>im_msg.events.event_type_version_id</code>. (technical
     * field) foreign key connected to the record
     */
    public UUID getEventTypeVersionId() {
        return this.eventTypeVersionId;
    }

    /**
     * Getter for <code>im_msg.events.event_type_id</code>. (technical field)
     * foreign key connected to the record
     */
    public UUID getEventTypeId() {
        return this.eventTypeId;
    }

    /**
     * Getter for <code>im_msg.events.publisher_id</code>. (technical field)
     * foreign key connected to the record
     */
    public UUID getPublisherId() {
        return this.publisherId;
    }

    /**
     * Getter for <code>im_msg.events.correlation_id</code>. Correlation ID of
     * the event linking event messages in different queues
     */
    public String getCorrelationId() {
        return this.correlationId;
    }

    /**
     * Getter for <code>im_msg.events.created_at</code>. Filled with a timestamp
     * when ActiveMQ Artemis acknowledges publishing
     */
    public Instant getCreatedAt() {
        return this.createdAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Events other = (Events) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.roomId == null) {
            if (other.roomId != null)
                return false;
        }
        else if (!this.roomId.equals(other.roomId))
            return false;
        if (this.eventTypeVersionId == null) {
            if (other.eventTypeVersionId != null)
                return false;
        }
        else if (!this.eventTypeVersionId.equals(other.eventTypeVersionId))
            return false;
        if (this.eventTypeId == null) {
            if (other.eventTypeId != null)
                return false;
        }
        else if (!this.eventTypeId.equals(other.eventTypeId))
            return false;
        if (this.publisherId == null) {
            if (other.publisherId != null)
                return false;
        }
        else if (!this.publisherId.equals(other.publisherId))
            return false;
        if (this.correlationId == null) {
            if (other.correlationId != null)
                return false;
        }
        else if (!this.correlationId.equals(other.correlationId))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.roomId == null) ? 0 : this.roomId.hashCode());
        result = prime * result + ((this.eventTypeVersionId == null) ? 0 : this.eventTypeVersionId.hashCode());
        result = prime * result + ((this.eventTypeId == null) ? 0 : this.eventTypeId.hashCode());
        result = prime * result + ((this.publisherId == null) ? 0 : this.publisherId.hashCode());
        result = prime * result + ((this.correlationId == null) ? 0 : this.correlationId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Events (");

        sb.append(id);
        sb.append(", ").append(roomId);
        sb.append(", ").append(eventTypeVersionId);
        sb.append(", ").append(eventTypeId);
        sb.append(", ").append(publisherId);
        sb.append(", ").append(correlationId);
        sb.append(", ").append(createdAt);

        sb.append(")");
        return sb.toString();
    }
}
