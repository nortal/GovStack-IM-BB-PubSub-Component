/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.records;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.Subscriptions;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * record of subscriptions to a specific room
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionsRecord extends UpdatableRecordImpl<SubscriptionsRecord> implements Record8<UUID, UUID, UUID, String, String, JSONB, JSONB, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>im_msg.subscriptions.id</code>. (technical field)
     * primary key of record
     */
    public SubscriptionsRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.id</code>. (technical field)
     * primary key of record
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>im_msg.subscriptions.room_id</code>. (technical field)
     * foreign key connected to the record
     */
    public SubscriptionsRecord setRoomId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.room_id</code>. (technical field)
     * foreign key connected to the record
     */
    public UUID getRoomId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>im_msg.subscriptions.event_type_id</code>. (technical
     * field) foreign key connected to the record
     */
    public SubscriptionsRecord setEventTypeId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.event_type_id</code>. (technical
     * field) foreign key connected to the record
     */
    public UUID getEventTypeId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>im_msg.subscriptions.identifier_type</code>. enumerator
     * specifying the source of identity
     */
    public SubscriptionsRecord setIdentifierType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.identifier_type</code>. enumerator
     * specifying the source of identity
     */
    public String getIdentifierType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>im_msg.subscriptions.identifier</code>. identification
     * token/code of the specified type
     */
    public SubscriptionsRecord setIdentifier(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.identifier</code>. identification
     * token/code of the specified type
     */
    public String getIdentifier() {
        return (String) get(4);
    }

    /**
     * Setter for <code>im_msg.subscriptions.parameters</code>. subscription
     * parameters
     */
    public SubscriptionsRecord setParameters(JSONB value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.parameters</code>. subscription
     * parameters
     */
    public JSONB getParameters() {
        return (JSONB) get(5);
    }

    /**
     * Setter for <code>im_msg.subscriptions.journal</code>. (technical field)
     * auditable journal of record changes
     */
    public SubscriptionsRecord setJournal(JSONB value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.journal</code>. (technical field)
     * auditable journal of record changes
     */
    public JSONB getJournal() {
        return (JSONB) get(6);
    }

    /**
     * Setter for <code>im_msg.subscriptions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public SubscriptionsRecord setDeletedAt(Instant value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscriptions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public Instant getDeletedAt() {
        return (Instant) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, String, String, JSONB, JSONB, Instant> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, UUID, UUID, String, String, JSONB, JSONB, Instant> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Subscriptions.SUBSCRIPTIONS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Subscriptions.SUBSCRIPTIONS.ROOM_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Subscriptions.SUBSCRIPTIONS.EVENT_TYPE_ID;
    }

    @Override
    public Field<String> field4() {
        return Subscriptions.SUBSCRIPTIONS.IDENTIFIER_TYPE;
    }

    @Override
    public Field<String> field5() {
        return Subscriptions.SUBSCRIPTIONS.IDENTIFIER;
    }

    @Override
    public Field<JSONB> field6() {
        return Subscriptions.SUBSCRIPTIONS.PARAMETERS;
    }

    @Override
    public Field<JSONB> field7() {
        return Subscriptions.SUBSCRIPTIONS.JOURNAL;
    }

    @Override
    public Field<Instant> field8() {
        return Subscriptions.SUBSCRIPTIONS.DELETED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getRoomId();
    }

    @Override
    public UUID component3() {
        return getEventTypeId();
    }

    @Override
    public String component4() {
        return getIdentifierType();
    }

    @Override
    public String component5() {
        return getIdentifier();
    }

    @Override
    public JSONB component6() {
        return getParameters();
    }

    @Override
    public JSONB component7() {
        return getJournal();
    }

    @Override
    public Instant component8() {
        return getDeletedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getRoomId();
    }

    @Override
    public UUID value3() {
        return getEventTypeId();
    }

    @Override
    public String value4() {
        return getIdentifierType();
    }

    @Override
    public String value5() {
        return getIdentifier();
    }

    @Override
    public JSONB value6() {
        return getParameters();
    }

    @Override
    public JSONB value7() {
        return getJournal();
    }

    @Override
    public Instant value8() {
        return getDeletedAt();
    }

    @Override
    public SubscriptionsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value2(UUID value) {
        setRoomId(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value3(UUID value) {
        setEventTypeId(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value4(String value) {
        setIdentifierType(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value5(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value6(JSONB value) {
        setParameters(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value7(JSONB value) {
        setJournal(value);
        return this;
    }

    @Override
    public SubscriptionsRecord value8(Instant value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public SubscriptionsRecord values(UUID value1, UUID value2, UUID value3, String value4, String value5, JSONB value6, JSONB value7, Instant value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionsRecord
     */
    public SubscriptionsRecord() {
        super(Subscriptions.SUBSCRIPTIONS);
    }

    /**
     * Create a detached, initialised SubscriptionsRecord
     */
    public SubscriptionsRecord(UUID id, UUID roomId, UUID eventTypeId, String identifierType, String identifier, JSONB parameters, JSONB journal, Instant deletedAt) {
        super(Subscriptions.SUBSCRIPTIONS);

        setId(id);
        setRoomId(roomId);
        setEventTypeId(eventTypeId);
        setIdentifierType(identifierType);
        setIdentifier(identifier);
        setParameters(parameters);
        setJournal(journal);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SubscriptionsRecord
     */
    public SubscriptionsRecord(com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos.Subscriptions value) {
        super(Subscriptions.SUBSCRIPTIONS);

        if (value != null) {
            setId(value.getId());
            setRoomId(value.getRoomId());
            setEventTypeId(value.getEventTypeId());
            setIdentifierType(value.getIdentifierType());
            setIdentifier(value.getIdentifier());
            setParameters(value.getParameters());
            setJournal(value.getJournal());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
