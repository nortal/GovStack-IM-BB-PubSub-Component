/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos;


import java.io.Serializable;
import java.time.Instant;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * record of subscriptions to a specific room
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscriptions implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID id;
    private final UUID roomId;
    private final UUID eventTypeId;
    private final String identifierType;
    private final String identifier;
    private final JSONB parameters;
    private final JSONB journal;
    private final Instant deletedAt;

    public Subscriptions(Subscriptions value) {
        this.id = value.id;
        this.roomId = value.roomId;
        this.eventTypeId = value.eventTypeId;
        this.identifierType = value.identifierType;
        this.identifier = value.identifier;
        this.parameters = value.parameters;
        this.journal = value.journal;
        this.deletedAt = value.deletedAt;
    }

    public Subscriptions(
        UUID id,
        UUID roomId,
        UUID eventTypeId,
        String identifierType,
        String identifier,
        JSONB parameters,
        JSONB journal,
        Instant deletedAt
    ) {
        this.id = id;
        this.roomId = roomId;
        this.eventTypeId = eventTypeId;
        this.identifierType = identifierType;
        this.identifier = identifier;
        this.parameters = parameters;
        this.journal = journal;
        this.deletedAt = deletedAt;
    }

    /**
     * Getter for <code>im_msg.subscriptions.id</code>. (technical field)
     * primary key of record
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>im_msg.subscriptions.room_id</code>. (technical field)
     * foreign key connected to the record
     */
    public UUID getRoomId() {
        return this.roomId;
    }

    /**
     * Getter for <code>im_msg.subscriptions.event_type_id</code>. (technical
     * field) foreign key connected to the record
     */
    public UUID getEventTypeId() {
        return this.eventTypeId;
    }

    /**
     * Getter for <code>im_msg.subscriptions.identifier_type</code>. enumerator
     * specifying the source of identity
     */
    public String getIdentifierType() {
        return this.identifierType;
    }

    /**
     * Getter for <code>im_msg.subscriptions.identifier</code>. identification
     * token/code of the specified type
     */
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * Getter for <code>im_msg.subscriptions.parameters</code>. subscription
     * parameters
     */
    public JSONB getParameters() {
        return this.parameters;
    }

    /**
     * Getter for <code>im_msg.subscriptions.journal</code>. (technical field)
     * auditable journal of record changes
     */
    public JSONB getJournal() {
        return this.journal;
    }

    /**
     * Getter for <code>im_msg.subscriptions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public Instant getDeletedAt() {
        return this.deletedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Subscriptions other = (Subscriptions) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.roomId == null) {
            if (other.roomId != null)
                return false;
        }
        else if (!this.roomId.equals(other.roomId))
            return false;
        if (this.eventTypeId == null) {
            if (other.eventTypeId != null)
                return false;
        }
        else if (!this.eventTypeId.equals(other.eventTypeId))
            return false;
        if (this.identifierType == null) {
            if (other.identifierType != null)
                return false;
        }
        else if (!this.identifierType.equals(other.identifierType))
            return false;
        if (this.identifier == null) {
            if (other.identifier != null)
                return false;
        }
        else if (!this.identifier.equals(other.identifier))
            return false;
        if (this.parameters == null) {
            if (other.parameters != null)
                return false;
        }
        else if (!this.parameters.equals(other.parameters))
            return false;
        if (this.journal == null) {
            if (other.journal != null)
                return false;
        }
        else if (!this.journal.equals(other.journal))
            return false;
        if (this.deletedAt == null) {
            if (other.deletedAt != null)
                return false;
        }
        else if (!this.deletedAt.equals(other.deletedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.roomId == null) ? 0 : this.roomId.hashCode());
        result = prime * result + ((this.eventTypeId == null) ? 0 : this.eventTypeId.hashCode());
        result = prime * result + ((this.identifierType == null) ? 0 : this.identifierType.hashCode());
        result = prime * result + ((this.identifier == null) ? 0 : this.identifier.hashCode());
        result = prime * result + ((this.parameters == null) ? 0 : this.parameters.hashCode());
        result = prime * result + ((this.journal == null) ? 0 : this.journal.hashCode());
        result = prime * result + ((this.deletedAt == null) ? 0 : this.deletedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Subscriptions (");

        sb.append(id);
        sb.append(", ").append(roomId);
        sb.append(", ").append(eventTypeId);
        sb.append(", ").append(identifierType);
        sb.append(", ").append(identifier);
        sb.append(", ").append(parameters);
        sb.append(", ").append(journal);
        sb.append(", ").append(deletedAt);

        sb.append(")");
        return sb.toString();
    }
}
