/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.records;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypeVersions;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * record of different versions of a specific event type
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTypeVersionsRecord extends UpdatableRecordImpl<EventTypeVersionsRecord> implements Record6<UUID, UUID, Integer, JSONB, JSONB, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>im_msg.event_type_versions.id</code>. (technical field)
     * primary key of record
     */
    public EventTypeVersionsRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.id</code>. (technical field)
     * primary key of record
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>im_msg.event_type_versions.event_type_id</code>.
     * (technical field) foreign key connected to the record
     */
    public EventTypeVersionsRecord setEventTypeId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.event_type_id</code>.
     * (technical field) foreign key connected to the record
     */
    public UUID getEventTypeId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>im_msg.event_type_versions.version</code>. version
     * number of the event type
     */
    public EventTypeVersionsRecord setVersion(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.version</code>. version
     * number of the event type
     */
    public Integer getVersion() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>im_msg.event_type_versions.json_schema</code>. JSON
     * schema of the required payload shape for this version of the event type
     */
    public EventTypeVersionsRecord setJsonSchema(JSONB value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.json_schema</code>. JSON
     * schema of the required payload shape for this version of the event type
     */
    public JSONB getJsonSchema() {
        return (JSONB) get(3);
    }

    /**
     * Setter for <code>im_msg.event_type_versions.journal</code>. (technical
     * field) auditable journal of record changes
     */
    public EventTypeVersionsRecord setJournal(JSONB value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.journal</code>. (technical
     * field) auditable journal of record changes
     */
    public JSONB getJournal() {
        return (JSONB) get(4);
    }

    /**
     * Setter for <code>im_msg.event_type_versions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public EventTypeVersionsRecord setDeletedAt(Instant value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_type_versions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public Instant getDeletedAt() {
        return (Instant) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, Integer, JSONB, JSONB, Instant> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<UUID, UUID, Integer, JSONB, JSONB, Instant> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.EVENT_TYPE_ID;
    }

    @Override
    public Field<Integer> field3() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.VERSION;
    }

    @Override
    public Field<JSONB> field4() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.JSON_SCHEMA;
    }

    @Override
    public Field<JSONB> field5() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.JOURNAL;
    }

    @Override
    public Field<Instant> field6() {
        return EventTypeVersions.EVENT_TYPE_VERSIONS.DELETED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getEventTypeId();
    }

    @Override
    public Integer component3() {
        return getVersion();
    }

    @Override
    public JSONB component4() {
        return getJsonSchema();
    }

    @Override
    public JSONB component5() {
        return getJournal();
    }

    @Override
    public Instant component6() {
        return getDeletedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getEventTypeId();
    }

    @Override
    public Integer value3() {
        return getVersion();
    }

    @Override
    public JSONB value4() {
        return getJsonSchema();
    }

    @Override
    public JSONB value5() {
        return getJournal();
    }

    @Override
    public Instant value6() {
        return getDeletedAt();
    }

    @Override
    public EventTypeVersionsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord value2(UUID value) {
        setEventTypeId(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord value3(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord value4(JSONB value) {
        setJsonSchema(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord value5(JSONB value) {
        setJournal(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord value6(Instant value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public EventTypeVersionsRecord values(UUID value1, UUID value2, Integer value3, JSONB value4, JSONB value5, Instant value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventTypeVersionsRecord
     */
    public EventTypeVersionsRecord() {
        super(EventTypeVersions.EVENT_TYPE_VERSIONS);
    }

    /**
     * Create a detached, initialised EventTypeVersionsRecord
     */
    public EventTypeVersionsRecord(UUID id, UUID eventTypeId, Integer version, JSONB jsonSchema, JSONB journal, Instant deletedAt) {
        super(EventTypeVersions.EVENT_TYPE_VERSIONS);

        setId(id);
        setEventTypeId(eventTypeId);
        setVersion(version);
        setJsonSchema(jsonSchema);
        setJournal(journal);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EventTypeVersionsRecord
     */
    public EventTypeVersionsRecord(com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos.EventTypeVersions value) {
        super(EventTypeVersions.EVENT_TYPE_VERSIONS);

        if (value != null) {
            setId(value.getId());
            setEventTypeId(value.getEventTypeId());
            setVersion(value.getVersion());
            setJsonSchema(value.getJsonSchema());
            setJournal(value.getJournal());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
