/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables;


import com.govstack.information_mediator.pubsub.shared.jooq.ImMsg;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.SubscriptionEventViewRecord;

import java.time.Instant;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionEventView extends TableImpl<SubscriptionEventViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>im_msg.subscription_event_view</code>
     */
    public static final SubscriptionEventView SUBSCRIPTION_EVENT_VIEW = new SubscriptionEventView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionEventViewRecord> getRecordType() {
        return SubscriptionEventViewRecord.class;
    }

    /**
     * The column <code>im_msg.subscription_event_view.event_id</code>.
     */
    public final TableField<SubscriptionEventViewRecord, UUID> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>im_msg.subscription_event_view.event_type_identifier</code>.
     */
    public final TableField<SubscriptionEventViewRecord, String> EVENT_TYPE_IDENTIFIER = createField(DSL.name("event_type_identifier"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>im_msg.subscription_event_view.event_created_at</code>.
     */
    public final TableField<SubscriptionEventViewRecord, Instant> EVENT_CREATED_AT = createField(DSL.name("event_created_at"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>im_msg.subscription_event_view.subscription_id</code>.
     */
    public final TableField<SubscriptionEventViewRecord, UUID> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>im_msg.subscription_event_view.delivery_attempts</code>.
     */
    public final TableField<SubscriptionEventViewRecord, Integer> DELIVERY_ATTEMPTS = createField(DSL.name("delivery_attempts"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>im_msg.subscription_event_view.delivery_status</code>.
     */
    public final TableField<SubscriptionEventViewRecord, String> DELIVERY_STATUS = createField(DSL.name("delivery_status"), SQLDataType.CLOB, this, "");

    private SubscriptionEventView(Name alias, Table<SubscriptionEventViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubscriptionEventView(Name alias, Table<SubscriptionEventViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "subscription_event_view" as  SELECT e.id AS event_id,
          et.identifier AS event_type_identifier,
          e.created_at AS event_created_at,
          s.id AS subscription_id,
          (count(((pm.published_at IS NOT NULL) OR NULL::boolean)))::integer AS delivery_attempts,
              CASE
                  WHEN (max(pm.delivered_at) IS NOT NULL) THEN 'DELIVERED'::text
                  WHEN (min(pm.published_at) < (CURRENT_TIMESTAMP - ((((r.configuration ->> 'messageExpiration'::text))::integer || ' milliseconds'::text))::interval)) THEN 'UNCONSUMED'::text
                  WHEN ((s.parameters ->> 'method'::text) = 'PULL'::text) THEN 'PUBLISHED'::text
                  WHEN (((s.parameters ->> 'method'::text) = 'PUSH'::text) AND (count(((pm.published_at IS NOT NULL) OR NULL::boolean)) < COALESCE(((s.parameters ->> 'deliveryAttempts'::text))::integer, ((r.configuration ->> 'deliveryAttempts'::text))::integer))) THEN 'PENDING'::text
                  ELSE 'UNCONSUMED'::text
              END AS delivery_status
         FROM ((((im_msg.events e
           JOIN im_msg.event_types et ON ((e.event_type_id = et.id)))
           LEFT JOIN im_msg.published_messages pm ON ((e.id = pm.event_id)))
           JOIN im_msg.subscriptions s ON ((pm.subscription_id = s.id)))
           JOIN im_msg.rooms r ON ((s.room_id = r.id)))
        GROUP BY e.id, et.identifier, e.created_at, s.id, s.parameters, r.configuration;
        """));
    }

    /**
     * Create an aliased <code>im_msg.subscription_event_view</code> table
     * reference
     */
    public SubscriptionEventView(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_EVENT_VIEW);
    }

    /**
     * Create an aliased <code>im_msg.subscription_event_view</code> table
     * reference
     */
    public SubscriptionEventView(Name alias) {
        this(alias, SUBSCRIPTION_EVENT_VIEW);
    }

    /**
     * Create a <code>im_msg.subscription_event_view</code> table reference
     */
    public SubscriptionEventView() {
        this(DSL.name("subscription_event_view"), null);
    }

    public <O extends Record> SubscriptionEventView(Table<O> child, ForeignKey<O, SubscriptionEventViewRecord> key) {
        super(child, key, SUBSCRIPTION_EVENT_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImMsg.IM_MSG;
    }

    @Override
    public SubscriptionEventView as(String alias) {
        return new SubscriptionEventView(DSL.name(alias), this);
    }

    @Override
    public SubscriptionEventView as(Name alias) {
        return new SubscriptionEventView(alias, this);
    }

    @Override
    public SubscriptionEventView as(Table<?> alias) {
        return new SubscriptionEventView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionEventView rename(String name) {
        return new SubscriptionEventView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionEventView rename(Name name) {
        return new SubscriptionEventView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionEventView rename(Table<?> name) {
        return new SubscriptionEventView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, Instant, UUID, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super Instant, ? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super Instant, ? super UUID, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
