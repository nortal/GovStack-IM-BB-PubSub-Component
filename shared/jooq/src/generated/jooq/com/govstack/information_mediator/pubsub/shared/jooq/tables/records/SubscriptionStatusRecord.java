/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.records;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.SubscriptionStatus;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * record of the status of a specific subscription
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionStatusRecord extends UpdatableRecordImpl<SubscriptionStatusRecord> implements Record4<UUID, UUID, String, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>im_msg.subscription_status.id</code>. (technical field)
     * primary key of record
     */
    public SubscriptionStatusRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscription_status.id</code>. (technical field)
     * primary key of record
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>im_msg.subscription_status.subscription_id</code>.
     * (technical field) foreign key connected to the record
     */
    public SubscriptionStatusRecord setSubscriptionId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscription_status.subscription_id</code>.
     * (technical field) foreign key connected to the record
     */
    public UUID getSubscriptionId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>im_msg.subscription_status.status</code>. enumerator of
     * the status to be assigned to the subscription
     */
    public SubscriptionStatusRecord setStatus(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscription_status.status</code>. enumerator of
     * the status to be assigned to the subscription
     */
    public String getStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>im_msg.subscription_status.updated_at</code>. moment of
     * assigning the status to a subscription
     */
    public SubscriptionStatusRecord setUpdatedAt(Instant value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.subscription_status.updated_at</code>. moment of
     * assigning the status to a subscription
     */
    public Instant getUpdatedAt() {
        return (Instant) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, Instant> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, Instant> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return SubscriptionStatus.SUBSCRIPTION_STATUS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return SubscriptionStatus.SUBSCRIPTION_STATUS.SUBSCRIPTION_ID;
    }

    @Override
    public Field<String> field3() {
        return SubscriptionStatus.SUBSCRIPTION_STATUS.STATUS;
    }

    @Override
    public Field<Instant> field4() {
        return SubscriptionStatus.SUBSCRIPTION_STATUS.UPDATED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getSubscriptionId();
    }

    @Override
    public String component3() {
        return getStatus();
    }

    @Override
    public Instant component4() {
        return getUpdatedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getSubscriptionId();
    }

    @Override
    public String value3() {
        return getStatus();
    }

    @Override
    public Instant value4() {
        return getUpdatedAt();
    }

    @Override
    public SubscriptionStatusRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SubscriptionStatusRecord value2(UUID value) {
        setSubscriptionId(value);
        return this;
    }

    @Override
    public SubscriptionStatusRecord value3(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public SubscriptionStatusRecord value4(Instant value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SubscriptionStatusRecord values(UUID value1, UUID value2, String value3, Instant value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionStatusRecord
     */
    public SubscriptionStatusRecord() {
        super(SubscriptionStatus.SUBSCRIPTION_STATUS);
    }

    /**
     * Create a detached, initialised SubscriptionStatusRecord
     */
    public SubscriptionStatusRecord(UUID id, UUID subscriptionId, String status, Instant updatedAt) {
        super(SubscriptionStatus.SUBSCRIPTION_STATUS);

        setId(id);
        setSubscriptionId(subscriptionId);
        setStatus(status);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SubscriptionStatusRecord
     */
    public SubscriptionStatusRecord(com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos.SubscriptionStatus value) {
        super(SubscriptionStatus.SUBSCRIPTION_STATUS);

        if (value != null) {
            setId(value.getId());
            setSubscriptionId(value.getSubscriptionId());
            setStatus(value.getStatus());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
