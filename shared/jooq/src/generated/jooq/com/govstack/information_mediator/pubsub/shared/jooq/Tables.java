/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypeVersions;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypes;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Events;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Managers;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.PublishedMessages;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.PublisherConstraints;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Publishers;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Rooms;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.SubscriptionEventView;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.SubscriptionStatus;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Subscriptions;


/**
 * Convenience access to all tables in im_msg.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables {

    /**
     * record of different versions of a specific event type
     */
    public static final EventTypeVersions EVENT_TYPE_VERSIONS = EventTypeVersions.EVENT_TYPE_VERSIONS;

    /**
     * record of event types available in specific room
     */
    public static final EventTypes EVENT_TYPES = EventTypes.EVENT_TYPES;

    /**
     * record of all published events
     */
    public static final Events EVENTS = Events.EVENTS;

    /**
     * record of managers in charge of specific rooms
     */
    public static final Managers MANAGERS = Managers.MANAGERS;

    /**
     * record a message published to a subscriber
     */
    public static final PublishedMessages PUBLISHED_MESSAGES = PublishedMessages.PUBLISHED_MESSAGES;

    /**
     * record of event types a specific publisher is allowed to create
     */
    public static final PublisherConstraints PUBLISHER_CONSTRAINTS = PublisherConstraints.PUBLISHER_CONSTRAINTS;

    /**
     * record of publishers allowed to create events in specific rooms
     */
    public static final Publishers PUBLISHERS = Publishers.PUBLISHERS;

    /**
     * record of rooms where events can be published
     */
    public static final Rooms ROOMS = Rooms.ROOMS;

    /**
     * The table <code>im_msg.subscription_event_view</code>.
     */
    public static final SubscriptionEventView SUBSCRIPTION_EVENT_VIEW = SubscriptionEventView.SUBSCRIPTION_EVENT_VIEW;

    /**
     * record of the status of a specific subscription
     */
    public static final SubscriptionStatus SUBSCRIPTION_STATUS = SubscriptionStatus.SUBSCRIPTION_STATUS;

    /**
     * record of subscriptions to a specific room
     */
    public static final Subscriptions SUBSCRIPTIONS = Subscriptions.SUBSCRIPTIONS;
}
