/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables.records;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypes;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * record of event types available in specific room
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTypesRecord extends UpdatableRecordImpl<EventTypesRecord> implements Record5<UUID, UUID, String, JSONB, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>im_msg.event_types.id</code>. (technical field) primary
     * key of record
     */
    public EventTypesRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_types.id</code>. (technical field) primary
     * key of record
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>im_msg.event_types.room_id</code>. (technical field)
     * foreign key connected to the record
     */
    public EventTypesRecord setRoomId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_types.room_id</code>. (technical field)
     * foreign key connected to the record
     */
    public UUID getRoomId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>im_msg.event_types.identifier</code>. human readable
     * identifier for the event type, used as name
     */
    public EventTypesRecord setIdentifier(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_types.identifier</code>. human readable
     * identifier for the event type, used as name
     */
    public String getIdentifier() {
        return (String) get(2);
    }

    /**
     * Setter for <code>im_msg.event_types.journal</code>. (technical field)
     * auditable journal of record changes
     */
    public EventTypesRecord setJournal(JSONB value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_types.journal</code>. (technical field)
     * auditable journal of record changes
     */
    public JSONB getJournal() {
        return (JSONB) get(3);
    }

    /**
     * Setter for <code>im_msg.event_types.deleted_at</code>. (technical field)
     * deletion moment of the record
     */
    public EventTypesRecord setDeletedAt(Instant value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>im_msg.event_types.deleted_at</code>. (technical field)
     * deletion moment of the record
     */
    public Instant getDeletedAt() {
        return (Instant) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, String, JSONB, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, UUID, String, JSONB, Instant> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return EventTypes.EVENT_TYPES.ID;
    }

    @Override
    public Field<UUID> field2() {
        return EventTypes.EVENT_TYPES.ROOM_ID;
    }

    @Override
    public Field<String> field3() {
        return EventTypes.EVENT_TYPES.IDENTIFIER;
    }

    @Override
    public Field<JSONB> field4() {
        return EventTypes.EVENT_TYPES.JOURNAL;
    }

    @Override
    public Field<Instant> field5() {
        return EventTypes.EVENT_TYPES.DELETED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getRoomId();
    }

    @Override
    public String component3() {
        return getIdentifier();
    }

    @Override
    public JSONB component4() {
        return getJournal();
    }

    @Override
    public Instant component5() {
        return getDeletedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getRoomId();
    }

    @Override
    public String value3() {
        return getIdentifier();
    }

    @Override
    public JSONB value4() {
        return getJournal();
    }

    @Override
    public Instant value5() {
        return getDeletedAt();
    }

    @Override
    public EventTypesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public EventTypesRecord value2(UUID value) {
        setRoomId(value);
        return this;
    }

    @Override
    public EventTypesRecord value3(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public EventTypesRecord value4(JSONB value) {
        setJournal(value);
        return this;
    }

    @Override
    public EventTypesRecord value5(Instant value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public EventTypesRecord values(UUID value1, UUID value2, String value3, JSONB value4, Instant value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventTypesRecord
     */
    public EventTypesRecord() {
        super(EventTypes.EVENT_TYPES);
    }

    /**
     * Create a detached, initialised EventTypesRecord
     */
    public EventTypesRecord(UUID id, UUID roomId, String identifier, JSONB journal, Instant deletedAt) {
        super(EventTypes.EVENT_TYPES);

        setId(id);
        setRoomId(roomId);
        setIdentifier(identifier);
        setJournal(journal);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EventTypesRecord
     */
    public EventTypesRecord(com.govstack.information_mediator.pubsub.shared.jooq.tables.pojos.EventTypes value) {
        super(EventTypes.EVENT_TYPES);

        if (value != null) {
            setId(value.getId());
            setRoomId(value.getRoomId());
            setIdentifier(value.getIdentifier());
            setJournal(value.getJournal());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
