/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq.tables;


import com.govstack.information_mediator.pubsub.shared.jooq.ImMsg;
import com.govstack.information_mediator.pubsub.shared.jooq.Keys;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.EventTypeVersionsRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * record of different versions of a specific event type
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTypeVersions extends TableImpl<EventTypeVersionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>im_msg.event_type_versions</code>
     */
    public static final EventTypeVersions EVENT_TYPE_VERSIONS = new EventTypeVersions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventTypeVersionsRecord> getRecordType() {
        return EventTypeVersionsRecord.class;
    }

    /**
     * The column <code>im_msg.event_type_versions.id</code>. (technical field)
     * primary key of record
     */
    public final TableField<EventTypeVersionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "(technical field) primary key of record");

    /**
     * The column <code>im_msg.event_type_versions.event_type_id</code>.
     * (technical field) foreign key connected to the record
     */
    public final TableField<EventTypeVersionsRecord, UUID> EVENT_TYPE_ID = createField(DSL.name("event_type_id"), SQLDataType.UUID.nullable(false), this, "(technical field) foreign key connected to the record");

    /**
     * The column <code>im_msg.event_type_versions.version</code>. version
     * number of the event type
     */
    public final TableField<EventTypeVersionsRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "version number of the event type");

    /**
     * The column <code>im_msg.event_type_versions.json_schema</code>. JSON
     * schema of the required payload shape for this version of the event type
     */
    public final TableField<EventTypeVersionsRecord, JSONB> JSON_SCHEMA = createField(DSL.name("json_schema"), SQLDataType.JSONB.nullable(false), this, "JSON schema of the required payload shape for this version of the event type");

    /**
     * The column <code>im_msg.event_type_versions.journal</code>. (technical
     * field) auditable journal of record changes
     */
    public final TableField<EventTypeVersionsRecord, JSONB> JOURNAL = createField(DSL.name("journal"), SQLDataType.JSONB.nullable(false), this, "(technical field) auditable journal of record changes");

    /**
     * The column <code>im_msg.event_type_versions.deleted_at</code>. (technical
     * field) deletion moment of the record
     */
    public final TableField<EventTypeVersionsRecord, Instant> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.INSTANT, this, "(technical field) deletion moment of the record");

    private EventTypeVersions(Name alias, Table<EventTypeVersionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventTypeVersions(Name alias, Table<EventTypeVersionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("record of different versions of a specific event type"), TableOptions.table());
    }

    /**
     * Create an aliased <code>im_msg.event_type_versions</code> table reference
     */
    public EventTypeVersions(String alias) {
        this(DSL.name(alias), EVENT_TYPE_VERSIONS);
    }

    /**
     * Create an aliased <code>im_msg.event_type_versions</code> table reference
     */
    public EventTypeVersions(Name alias) {
        this(alias, EVENT_TYPE_VERSIONS);
    }

    /**
     * Create a <code>im_msg.event_type_versions</code> table reference
     */
    public EventTypeVersions() {
        this(DSL.name("event_type_versions"), null);
    }

    public <O extends Record> EventTypeVersions(Table<O> child, ForeignKey<O, EventTypeVersionsRecord> key) {
        super(child, key, EVENT_TYPE_VERSIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ImMsg.IM_MSG;
    }

    @Override
    public UniqueKey<EventTypeVersionsRecord> getPrimaryKey() {
        return Keys.PK_EVENT_TYPE_VERSIONS;
    }

    @Override
    public List<UniqueKey<EventTypeVersionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_EVENT_TYPE_VERSIONS);
    }

    @Override
    public List<ForeignKey<EventTypeVersionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT_TYPE_VERSIONS__FK_EVENT_TYPE_VERSIONS_EVENT_TYPE_ID);
    }

    private transient EventTypes _eventTypes;

    /**
     * Get the implicit join path to the <code>im_msg.event_types</code> table.
     */
    public EventTypes eventTypes() {
        if (_eventTypes == null)
            _eventTypes = new EventTypes(this, Keys.EVENT_TYPE_VERSIONS__FK_EVENT_TYPE_VERSIONS_EVENT_TYPE_ID);

        return _eventTypes;
    }

    @Override
    public EventTypeVersions as(String alias) {
        return new EventTypeVersions(DSL.name(alias), this);
    }

    @Override
    public EventTypeVersions as(Name alias) {
        return new EventTypeVersions(alias, this);
    }

    @Override
    public EventTypeVersions as(Table<?> alias) {
        return new EventTypeVersions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTypeVersions rename(String name) {
        return new EventTypeVersions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTypeVersions rename(Name name) {
        return new EventTypeVersions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventTypeVersions rename(Table<?> name) {
        return new EventTypeVersions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, Integer, JSONB, JSONB, Instant> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super UUID, ? super Integer, ? super JSONB, ? super JSONB, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super UUID, ? super Integer, ? super JSONB, ? super JSONB, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
