/*
 * This file is generated by jOOQ.
 */
package com.govstack.information_mediator.pubsub.shared.jooq;


import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypeVersions;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.EventTypes;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Events;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Managers;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.PublishedMessages;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.PublisherConstraints;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Publishers;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Rooms;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.SubscriptionStatus;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.Subscriptions;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.EventTypeVersionsRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.EventTypesRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.EventsRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.ManagersRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.PublishedMessagesRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.PublisherConstraintsRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.PublishersRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.RoomsRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.SubscriptionStatusRecord;
import com.govstack.information_mediator.pubsub.shared.jooq.tables.records.SubscriptionsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * im_msg.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<EventTypeVersionsRecord> PK_EVENT_TYPE_VERSIONS = Internal.createUniqueKey(EventTypeVersions.EVENT_TYPE_VERSIONS, DSL.name("pk_event_type_versions"), new TableField[] { EventTypeVersions.EVENT_TYPE_VERSIONS.ID }, true);
    public static final UniqueKey<EventTypeVersionsRecord> UQ_EVENT_TYPE_VERSIONS = Internal.createUniqueKey(EventTypeVersions.EVENT_TYPE_VERSIONS, DSL.name("uq_event_type_versions"), new TableField[] { EventTypeVersions.EVENT_TYPE_VERSIONS.EVENT_TYPE_ID, EventTypeVersions.EVENT_TYPE_VERSIONS.VERSION, EventTypeVersions.EVENT_TYPE_VERSIONS.DELETED_AT }, true);
    public static final UniqueKey<EventTypesRecord> PK_EVENT_TYPES = Internal.createUniqueKey(EventTypes.EVENT_TYPES, DSL.name("pk_event_types"), new TableField[] { EventTypes.EVENT_TYPES.ID }, true);
    public static final UniqueKey<EventTypesRecord> UQ_EVENT_TYPES = Internal.createUniqueKey(EventTypes.EVENT_TYPES, DSL.name("uq_event_types"), new TableField[] { EventTypes.EVENT_TYPES.ROOM_ID, EventTypes.EVENT_TYPES.IDENTIFIER, EventTypes.EVENT_TYPES.DELETED_AT }, true);
    public static final UniqueKey<EventsRecord> PK_EVENTS = Internal.createUniqueKey(Events.EVENTS, DSL.name("pk_events"), new TableField[] { Events.EVENTS.ID }, true);
    public static final UniqueKey<ManagersRecord> PK_MANAGERS = Internal.createUniqueKey(Managers.MANAGERS, DSL.name("pk_managers"), new TableField[] { Managers.MANAGERS.ID }, true);
    public static final UniqueKey<ManagersRecord> UQ_MANAGERS = Internal.createUniqueKey(Managers.MANAGERS, DSL.name("uq_managers"), new TableField[] { Managers.MANAGERS.IDENTIFIER, Managers.MANAGERS.DELETED_AT }, true);
    public static final UniqueKey<PublishedMessagesRecord> PK_PUBLISHED_MESSAGES = Internal.createUniqueKey(PublishedMessages.PUBLISHED_MESSAGES, DSL.name("pk_published_messages"), new TableField[] { PublishedMessages.PUBLISHED_MESSAGES.ID }, true);
    public static final UniqueKey<PublisherConstraintsRecord> PK_PUBLISHER_CONSTRAINTS = Internal.createUniqueKey(PublisherConstraints.PUBLISHER_CONSTRAINTS, DSL.name("pk_publisher_constraints"), new TableField[] { PublisherConstraints.PUBLISHER_CONSTRAINTS.ID }, true);
    public static final UniqueKey<PublisherConstraintsRecord> UQ_PUBLISHER_CONSTRAINTS = Internal.createUniqueKey(PublisherConstraints.PUBLISHER_CONSTRAINTS, DSL.name("uq_publisher_constraints"), new TableField[] { PublisherConstraints.PUBLISHER_CONSTRAINTS.PUBLISHER_ID, PublisherConstraints.PUBLISHER_CONSTRAINTS.EVENT_TYPE_ID, PublisherConstraints.PUBLISHER_CONSTRAINTS.DELETED_AT }, true);
    public static final UniqueKey<PublishersRecord> PK_PUBLISHERS = Internal.createUniqueKey(Publishers.PUBLISHERS, DSL.name("pk_publishers"), new TableField[] { Publishers.PUBLISHERS.ID }, true);
    public static final UniqueKey<PublishersRecord> UQ_PUBLISHERS = Internal.createUniqueKey(Publishers.PUBLISHERS, DSL.name("uq_publishers"), new TableField[] { Publishers.PUBLISHERS.ROOM_ID, Publishers.PUBLISHERS.IDENTIFIER, Publishers.PUBLISHERS.DELETED_AT }, true);
    public static final UniqueKey<RoomsRecord> PK_ROOMS = Internal.createUniqueKey(Rooms.ROOMS, DSL.name("pk_rooms"), new TableField[] { Rooms.ROOMS.ID }, true);
    public static final UniqueKey<RoomsRecord> UQ_ROOMS = Internal.createUniqueKey(Rooms.ROOMS, DSL.name("uq_rooms"), new TableField[] { Rooms.ROOMS.IDENTIFIER, Rooms.ROOMS.DELETED_AT }, true);
    public static final UniqueKey<SubscriptionStatusRecord> PK_SUBSCRIPTION_STATUS = Internal.createUniqueKey(SubscriptionStatus.SUBSCRIPTION_STATUS, DSL.name("pk_subscription_status"), new TableField[] { SubscriptionStatus.SUBSCRIPTION_STATUS.ID }, true);
    public static final UniqueKey<SubscriptionsRecord> PK_SUBSCRIPTIONS = Internal.createUniqueKey(Subscriptions.SUBSCRIPTIONS, DSL.name("pk_subscriptions"), new TableField[] { Subscriptions.SUBSCRIPTIONS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<EventTypeVersionsRecord, EventTypesRecord> EVENT_TYPE_VERSIONS__FK_EVENT_TYPE_VERSIONS_EVENT_TYPE_ID = Internal.createForeignKey(EventTypeVersions.EVENT_TYPE_VERSIONS, DSL.name("fk_event_type_versions_event_type_id"), new TableField[] { EventTypeVersions.EVENT_TYPE_VERSIONS.EVENT_TYPE_ID }, Keys.PK_EVENT_TYPES, new TableField[] { EventTypes.EVENT_TYPES.ID }, true);
    public static final ForeignKey<EventTypesRecord, RoomsRecord> EVENT_TYPES__FK_EVENT_TYPES_ROOM_ID = Internal.createForeignKey(EventTypes.EVENT_TYPES, DSL.name("fk_event_types_room_id"), new TableField[] { EventTypes.EVENT_TYPES.ROOM_ID }, Keys.PK_ROOMS, new TableField[] { Rooms.ROOMS.ID }, true);
    public static final ForeignKey<EventsRecord, EventTypesRecord> EVENTS__FK_EVENTS_EVENT_TYPE_ID = Internal.createForeignKey(Events.EVENTS, DSL.name("fk_events_event_type_id"), new TableField[] { Events.EVENTS.EVENT_TYPE_ID }, Keys.PK_EVENT_TYPES, new TableField[] { EventTypes.EVENT_TYPES.ID }, true);
    public static final ForeignKey<EventsRecord, EventTypeVersionsRecord> EVENTS__FK_EVENTS_EVENT_TYPE_VERSION_ID = Internal.createForeignKey(Events.EVENTS, DSL.name("fk_events_event_type_version_id"), new TableField[] { Events.EVENTS.EVENT_TYPE_VERSION_ID }, Keys.PK_EVENT_TYPE_VERSIONS, new TableField[] { EventTypeVersions.EVENT_TYPE_VERSIONS.ID }, true);
    public static final ForeignKey<EventsRecord, PublishersRecord> EVENTS__FK_EVENTS_PUBLISHER_ID = Internal.createForeignKey(Events.EVENTS, DSL.name("fk_events_publisher_id"), new TableField[] { Events.EVENTS.PUBLISHER_ID }, Keys.PK_PUBLISHERS, new TableField[] { Publishers.PUBLISHERS.ID }, true);
    public static final ForeignKey<EventsRecord, RoomsRecord> EVENTS__FK_EVENTS_ROOM_ID = Internal.createForeignKey(Events.EVENTS, DSL.name("fk_events_room_id"), new TableField[] { Events.EVENTS.ROOM_ID }, Keys.PK_ROOMS, new TableField[] { Rooms.ROOMS.ID }, true);
    public static final ForeignKey<PublishedMessagesRecord, EventsRecord> PUBLISHED_MESSAGES__FK_PUBLISHED_MESSAGES_EVENT_ID = Internal.createForeignKey(PublishedMessages.PUBLISHED_MESSAGES, DSL.name("fk_published_messages_event_id"), new TableField[] { PublishedMessages.PUBLISHED_MESSAGES.EVENT_ID }, Keys.PK_EVENTS, new TableField[] { Events.EVENTS.ID }, true);
    public static final ForeignKey<PublishedMessagesRecord, SubscriptionsRecord> PUBLISHED_MESSAGES__FK_PUBLISHED_MESSAGES_SUBSCRIPTION_ID = Internal.createForeignKey(PublishedMessages.PUBLISHED_MESSAGES, DSL.name("fk_published_messages_subscription_id"), new TableField[] { PublishedMessages.PUBLISHED_MESSAGES.SUBSCRIPTION_ID }, Keys.PK_SUBSCRIPTIONS, new TableField[] { Subscriptions.SUBSCRIPTIONS.ID }, true);
    public static final ForeignKey<PublisherConstraintsRecord, EventTypesRecord> PUBLISHER_CONSTRAINTS__FK_PUBLISHER_CONSTRAINTS_EVENT_TYPES_ID = Internal.createForeignKey(PublisherConstraints.PUBLISHER_CONSTRAINTS, DSL.name("fk_publisher_constraints_event_types_id"), new TableField[] { PublisherConstraints.PUBLISHER_CONSTRAINTS.EVENT_TYPE_ID }, Keys.PK_EVENT_TYPES, new TableField[] { EventTypes.EVENT_TYPES.ID }, true);
    public static final ForeignKey<PublisherConstraintsRecord, PublishersRecord> PUBLISHER_CONSTRAINTS__FK_PUBLISHER_CONSTRAINTS_PUBLISHERS_ID = Internal.createForeignKey(PublisherConstraints.PUBLISHER_CONSTRAINTS, DSL.name("fk_publisher_constraints_publishers_id"), new TableField[] { PublisherConstraints.PUBLISHER_CONSTRAINTS.PUBLISHER_ID }, Keys.PK_PUBLISHERS, new TableField[] { Publishers.PUBLISHERS.ID }, true);
    public static final ForeignKey<PublishersRecord, RoomsRecord> PUBLISHERS__FK_PUBLISHERS_ROOM_ID = Internal.createForeignKey(Publishers.PUBLISHERS, DSL.name("fk_publishers_room_id"), new TableField[] { Publishers.PUBLISHERS.ROOM_ID }, Keys.PK_ROOMS, new TableField[] { Rooms.ROOMS.ID }, true);
    public static final ForeignKey<RoomsRecord, ManagersRecord> ROOMS__FK_ROOMS_MANAGER_ID = Internal.createForeignKey(Rooms.ROOMS, DSL.name("fk_rooms_manager_id"), new TableField[] { Rooms.ROOMS.MANAGER_ID }, Keys.PK_MANAGERS, new TableField[] { Managers.MANAGERS.ID }, true);
    public static final ForeignKey<SubscriptionStatusRecord, SubscriptionsRecord> SUBSCRIPTION_STATUS__FK_SUBSCRIPTION_STATUS_SUBSCRIPTION_ID = Internal.createForeignKey(SubscriptionStatus.SUBSCRIPTION_STATUS, DSL.name("fk_subscription_status_subscription_id"), new TableField[] { SubscriptionStatus.SUBSCRIPTION_STATUS.SUBSCRIPTION_ID }, Keys.PK_SUBSCRIPTIONS, new TableField[] { Subscriptions.SUBSCRIPTIONS.ID }, true);
    public static final ForeignKey<SubscriptionsRecord, EventTypesRecord> SUBSCRIPTIONS__FK_SUBSCRIPTIONS_EVENT_TYPE_ID = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("fk_subscriptions_event_type_id"), new TableField[] { Subscriptions.SUBSCRIPTIONS.EVENT_TYPE_ID }, Keys.PK_EVENT_TYPES, new TableField[] { EventTypes.EVENT_TYPES.ID }, true);
    public static final ForeignKey<SubscriptionsRecord, RoomsRecord> SUBSCRIPTIONS__FK_SUBSCRIPTIONS_ROOM_ID = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("fk_subscriptions_room_id"), new TableField[] { Subscriptions.SUBSCRIPTIONS.ROOM_ID }, Keys.PK_ROOMS, new TableField[] { Rooms.ROOMS.ID }, true);
}
